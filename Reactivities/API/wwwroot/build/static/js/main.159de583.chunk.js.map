{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/ProfileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/homepage.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendees.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","app/layout/NavBar.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/ImageUpload/PhotoWidgetCropper.tsx","app/common/ImageUpload/PhotoWidgetDropzone.tsx","app/common/ImageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","setDisplayName","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComments","invoke","StoreContext","createContext","useStore","useContext","MyTextInput","props","useField","field","meta","Form","Field","touched","Label","basic","color","observer","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","Header","as","textAlign","placeholder","type","render","style","maginBottom","Button","positive","fluid","ValidationErrors","Message","List","map","err","i","Item","validationSchema","Yup","required","isValid","dirty","disabled","Segment","inverted","vertical","Container","text","Image","size","src","marginBottom","isLoggedIn","Link","to","onClick","Menu","width","marginTop","icon","attached","active","has","onChange","Reveal","animated","Content","visible","hiddle","e","preventDefault","handleFollow","Card","Description","extra","Icon","styles","borderColor","borderWidth","horizontal","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Group","secondary","ActivityListItemAttendees","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","fixed","NavLink","exact","header","alt","marginRight","position","avatar","spaced","Dropdown","pointing","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","float","verticalAlign","length","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","panes","menuItem","pane","Tab","Pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","label","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.159de583.chunk.js","sourcesContent":["export interface Pagination {\r\n      currentPage: number;\r\n      itemsPerPage: number;\r\n      totalItems: number;\r\n      totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n      data: T;\r\n      pagination: Pagination;\r\n\r\n      constructor(data: T, pagination: Pagination) {\r\n            this.data = data;\r\n            this.pagination = pagination;\r\n      }\r\n}\r\n\r\nexport class PagingParams {\r\n      pageNumber;\r\n      pageSize;\r\n\r\n      constructor (pageNumber = 1, pageSize = 2) {\r\n            this.pageNumber = pageNumber;\r\n            this.pageSize = pageSize;\r\n      }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\n// add timeouts for methods\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            } \r\n\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T> (url: string, body: {}) => axios.delete<T>(url).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`, {}),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`, {}),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put('/profiles', profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername?: string;\r\n    isCancelled?: boolean;\r\n    isGoing?: boolean;\r\n    isHost?: boolean;\r\n    host?: Profile;\r\n    attendees?: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor (init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor (activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n      username: string;\r\n      displayName: string;\r\n      image?: string;\r\n      bio?: string;\r\n      followersCount: number;\r\n      followingCount: number;\r\n      following: boolean;\r\n      photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n      constructor(user: User) {\r\n           this.username = user.username;\r\n           this.displayName = user.displayName;\r\n           this.image = user.image; \r\n      }\r\n}\r\n\r\nexport interface Photo {\r\n      id: string;\r\n      url: string;\r\n      isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n      id: string;\r\n      title: string;\r\n      category: string;\r\n      date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    };\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        });\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => a.date!.getTime() - b.date!.getTime())\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy')\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {    \r\n        this.loadingInitial = true;    \r\n        try {\r\n            // Getting the activities from the API\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n\r\n            // Convert the date to correct format\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            // Display error to browser console\r\n            console.log(error);\r\n\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n \r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity};\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);                \r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees?.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n      profile: Profile | null = null;\r\n      loadingProfile = false;\r\n      uploading = false;\r\n      loading = false;\r\n      followings: Profile[] = [];\r\n      loadingFollowings = false;\r\n      activeTab = 0;\r\n      userActivities: UserActivity[] = [];\r\n      loadingActivities = false;\r\n\r\n      constructor() {\r\n            makeAutoObservable(this);\r\n\r\n            reaction(\r\n                  () => this.activeTab,\r\n                  activeTab => {\r\n                        if (activeTab === 3 || this.activeTab === 4) {\r\n                              const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                              this.loadFollowings(predicate);\r\n                        } else {\r\n                              this.followings = [];\r\n                        }\r\n                  }\r\n            )\r\n      }\r\n\r\n      setActiveTab = (activeTab: any) => {\r\n            this.activeTab = activeTab;\r\n      }\r\n\r\n      get isCurrentUser() {\r\n            if (store.userStore.user && this.profile) {\r\n                  return store.userStore.user.username === this.profile.username;\r\n            }\r\n\r\n            return false;\r\n      }\r\n\r\n      loadProfile = async (username: string) => {\r\n            this.loadingProfile = true;\r\n\r\n            try {\r\n                  const profile = await agent.Profiles.get(username);\r\n                  runInAction(() => {\r\n                        this.profile = profile;\r\n                        this.loadingProfile = false;\r\n                  })\r\n            } catch (error) {\r\n                  console.log(error);\r\n                  runInAction(() => this.loadingProfile = false);\r\n            }\r\n      }\r\n\r\n      uploadPhoto = async (file: Blob) => {\r\n            this.uploading = true;\r\n            try {\r\n                  const response = await agent.Profiles.uploadPhoto(file);\r\n                  const photo = response.data;\r\n                  runInAction(() => {\r\n                        if (this.profile) {\r\n                              this.profile.photos?.push(photo);\r\n                              if (photo.isMain && store.userStore.user) {\r\n                                    store.userStore.setImage(photo.url);\r\n                                    this.profile.image = photo.url;\r\n                              }\r\n                        }\r\n                        this.uploading = false;\r\n                  })\r\n            } catch (error) {\r\n                  console.log(error);\r\n                  runInAction(() => this.uploading = false);\r\n            }\r\n      }\r\n\r\n      setMainPhoto = async (photo: Photo) => {\r\n            this.loading = true;\r\n            try {\r\n                  await agent.Profiles.setMainPhoto(photo.id);\r\n                  store.userStore.setImage(photo.url);\r\n                  runInAction(() => {\r\n                        if (this.profile && this.profile.photos) {\r\n                              this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                              this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                              this.profile.image = photo.url;\r\n                              this.loading = false;\r\n                        }\r\n                  })      \r\n            } catch (error) {\r\n                  runInAction(() => this.loading = false);\r\n                  console.log(error);\r\n            }\r\n      }\r\n\r\n      deletePhoto = async (photo: Photo) => {\r\n            this.loading = true;\r\n            try {\r\n                  await agent.Profiles.deletePhoto(photo.id);\r\n                  runInAction(() => {\r\n                        if(this.profile) {\r\n                              this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                              this.loading = false;\r\n                        }\r\n                  })\r\n            } catch (error) {\r\n                  runInAction(() => this.loading = false);\r\n                  console.log(error);\r\n            }\r\n\r\n\r\n      }\r\n\r\n      updateFollowing = async (username: string, following: boolean) => {\r\n            this.loading = true;\r\n\r\n            try {\r\n                  await agent.Profiles.updateFollowing(username);\r\n                  store.activityStore.updateAttendeeFollowing(username);\r\n                  runInAction(() => {\r\n                        if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                              following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                              this.profile.following = !this.profile.following;\r\n                        }\r\n\r\n                        if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                              following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                        }\r\n\r\n                        this.followings.forEach(profile => {\r\n                              if (profile.username === username) {\r\n                                    profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                                    profile.following = !profile.following;\r\n                              }\r\n                        })\r\n\r\n                        this.loading = false;\r\n                  });\r\n            } catch (error) {\r\n                  console.log(error);\r\n                  runInAction(() => this.loading = false);\r\n            }\r\n      }\r\n\r\n      loadFollowings = async (predicate: string) => {\r\n            this.loadingFollowings = true;\r\n\r\n            try {\r\n                  const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n                  runInAction(() => {\r\n                        this.followings = followings;\r\n                        this.loadingFollowings = false;\r\n                  });\r\n            } catch (error) {\r\n                  console.log(error);\r\n                  runInAction(() => this.loadingFollowings = false);\r\n            }\r\n      }\r\n\r\n      loadUserActivities = async (username: string, predicate?: string) => {\r\n            this.loadingActivities = true;\r\n            \r\n            try {\r\n                  const activities = await agent.Profiles.listActivities(username, predicate!);\r\n                  runInAction(() => {\r\n                        this.userActivities = activities;\r\n                        this.loadingActivities = false;\r\n                  });\r\n            } catch (error) {\r\n                  console.log(error);\r\n                  runInAction(() => {\r\n                        this.loadingActivities = false;\r\n                  })\r\n            }\r\n      }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n      user: User | null = null;\r\n\r\n      constructor() {\r\n            makeAutoObservable(this)\r\n      }\r\n\r\n      get isLoggedIn() {\r\n            return !!this.user;\r\n      }\r\n\r\n      login = async (creds: UserFormValues) => {\r\n            try {\r\n                  const user = await agent.Account.login(creds);\r\n                  store.commonStore.setToken(user.token);\r\n                  runInAction(() => this.user = user);\r\n                  history.push('/activities');\r\n                  store.modalStore.closeModal();\r\n            } catch (error) {\r\n                  throw error;\r\n            }\r\n      }\r\n\r\n      logout = () => {\r\n            store.commonStore.setToken(null);\r\n            window.localStorage.removeItem('jwt');\r\n            this.user = null;\r\n            history.push('/');\r\n      }\r\n\r\n      getUser = async () => {\r\n            try {\r\n                  const user = await agent.Account.current();\r\n                  runInAction(() => this.user = user);\r\n            } catch (error) {\r\n                  console.log(error);\r\n            }\r\n      }\r\n\r\n      register = async (creds: UserFormValues) => {\r\n            try {\r\n                  const user = await agent.Account.register(creds);\r\n                  store.commonStore.setToken(user.token);\r\n                  runInAction(() => this.user = user);\r\n                  history.push('/activities');\r\n                  store.modalStore.closeModal();\r\n            } catch (error) {\r\n                  throw error;\r\n            }\r\n      }\r\n\r\n      setImage = (image: string) => {\r\n            if (this.user) this.user.image = image;\r\n      }\r\n\r\n      setDisplayName = (name: string) => {\r\n            if (this.user) this.user.displayName = name;\r\n      }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./ProfileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n      error: ServerError | null = null;\r\n      token: string | null = window.localStorage.getItem('jwt');\r\n      appLoaded = false;\r\n\r\n      constructor() {\r\n            makeAutoObservable(this);\r\n\r\n            reaction(\r\n                  () => this.token,\r\n                  token => {\r\n                        if (token) {\r\n                              window.localStorage.setItem('jwt', token)\r\n                        } else {\r\n                              window.localStorage.removeItem('jwt')\r\n                        }\r\n                  }\r\n            )\r\n      }\r\n\r\n      setServerError = (error: ServerError) => {\r\n            this.error = error;\r\n      }\r\n\r\n      setToken = (token: string | null) => {\r\n            this.token = token;\r\n      }\r\n\r\n      setAppLoaded = () => {\r\n            this.appLoaded = true;\r\n      }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n      open: boolean;\r\n      body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n      modal: Modal = {\r\n            open: false,\r\n            body: null\r\n      }\r\n\r\n      constructor() {\r\n            makeAutoObservable(this)\r\n      }\r\n\r\n      openModal = (content: JSX.Element) => {\r\n            this.modal.open = true;\r\n            this.modal.body = content;\r\n      }\r\n\r\n      closeModal = () => {\r\n            this.modal.open = false;\r\n            this.modal.body = null;\r\n      }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n      comments: ChatComment[] = [];\r\n      hubConnection: HubConnection | null = null;\r\n\r\n      constructor () {\r\n            makeAutoObservable(this);        \r\n      }\r\n\r\n      createHubConnection = (activityId: string) => {\r\n            if (store.activityStore.selectedActivity) {\r\n                  this.hubConnection = new HubConnectionBuilder()\r\n                        .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                              accessTokenFactory: () => store.userStore.user?.token!      \r\n                        })\r\n                        .withAutomaticReconnect()\r\n                        .configureLogging(LogLevel.Information)\r\n                        .build();\r\n\r\n                  this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n            \r\n                  this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                        runInAction(() => {\r\n                              comments.forEach(comment => {\r\n                                    comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                              })\r\n                              this.comments = comments;\r\n                        });\r\n                  })\r\n\r\n                  this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                        runInAction(() => {\r\n                              comment.createdAt = new Date(comment.createdAt);\r\n                              this.comments.unshift(comment);\r\n                        });\r\n                  })\r\n            }\r\n      }\r\n\r\n      stopHubConnection = () => {\r\n            this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n      }\r\n\r\n      clearComments = () => {\r\n            this.comments = [];\r\n            this.stopHubConnection();\r\n      }\r\n\r\n      addComments = async (values: any) => {\r\n            values.activityId = store.activityStore.selectedActivity?.id;\r\n\r\n            try {\r\n                  await this.hubConnection?.invoke('SendComment', values);\r\n            } catch (error) {\r\n                  console.log(error);\r\n            }\r\n      }\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n      placeholder : string;\r\n      name: string;\r\n      type?: string;\r\n      label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n      const [field, meta] = useField(props.name);\r\n      return (\r\n            <Form.Field error={meta.touched && !!meta.error}>\r\n                  <input {...field} {...props} />\r\n                  {meta.touched && meta.error ? (\r\n                        <Label basic color='red'>{meta.error}</Label>\r\n                  ) : null}\r\n            </Form.Field>\r\n      )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n      const {userStore} = useStore();\r\n      return (\r\n            <Formik\r\n                  initialValues={{email: '', password: '', error: null}}\r\n                  onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => setErrors({error: 'Invalid Email or Password Entered'}))}\r\n            >\r\n                  {({handleSubmit, isSubmitting, errors}) => (\r\n                        <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                              <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                              <MyTextInput name='email' placeholder='Email' />\r\n                              <MyTextInput name='password' placeholder='Password' type='password' />\r\n                              <ErrorMessage \r\n                                    name='error' render={() => <Label style={{maginBottom: 10}} basic color='red' content={errors.error} />}\r\n                              />\r\n                              <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                        </Form>\r\n                  )}\r\n            </Formik>\r\n      )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n      errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n      return (\r\n            <Message error>\r\n                  {errors && (\r\n                        <Message.List>\r\n                              {errors.map((err: any, i: any) => (\r\n                                    <Message.Item key={i}>\r\n                                          {err}\r\n                                    </Message.Item>\r\n                              ))}\r\n                        </Message.List>\r\n                  )}\r\n            </Message>\r\n      )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n      const {userStore} = useStore();\r\n      return (\r\n            <Formik\r\n                  initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n                  onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => setErrors({error}))}\r\n                  validationSchema={Yup.object({\r\n                        displayName: Yup.string().required(),\r\n                        username: Yup.string().required(),\r\n                        email: Yup.string().required().email(),\r\n                        password: Yup.string().required(),\r\n                  })}\r\n            >\r\n                  {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                        <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                              <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                              <MyTextInput name='displayName' placeholder='Display Name' />\r\n                              <MyTextInput name='username' placeholder='Username' />\r\n                              <MyTextInput name='email' placeholder='Email' />\r\n                              <MyTextInput name='password' placeholder='Password' type='password' />\r\n                              <ErrorMessage \r\n                                    name='error' render={() => <ValidationErrors errors={errors.error} />}\r\n                              />\r\n                              <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                        </Form>\r\n                  )}\r\n            </Formik>\r\n      )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n      const {userStore, modalStore} = useStore();\r\n      return (\r\n            <Segment inverted textAlign='center' vertical className='masthead'>\r\n                  <Container text>\r\n                        <Header as='h1' inverted>\r\n                              <Image size='massive' src='/assets/logo.png' style={{marginBottom: 12}} />\r\n                              Reactivities\r\n                        </Header>\r\n                        {userStore.isLoggedIn ? (\r\n                              <>\r\n                                    <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                                    <Button as={Link} to='/activities' size='huge' inverted>\r\n                                          Go to Activities!\r\n                                    </Button>\r\n                              </>\r\n                        ) : (\r\n                              <>\r\n                                    <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                                          Login now!\r\n                                    </Button>\r\n                                    <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                                          Register now!\r\n                                    </Button>\r\n                              </>\r\n                        )}                \r\n                  </Container>\r\n            </Segment>\r\n      );\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters() {\r\n      const {activityStore: {predicate, setPredicate}} = useStore();\r\n      return (\r\n            <>\r\n                  <Menu vertical size='large' style={{width: '100%', marginTop:25}}>\r\n                        <Header icon='filter' attached color='teal' content='Filters' />\r\n                        <Menu.Item content='All Activities' \r\n                                   active={predicate.has('all')}\r\n                                   onClick={() => setPredicate('all', 'true')} />\r\n                        <Menu.Item content=\"I'm Going\" \r\n                                   active={predicate.has('isGoing')}\r\n                                   onClick={() => setPredicate('isGoing', 'true')} />\r\n                        <Menu.Item content=\"I'm Hosting\"\r\n                                   active={predicate.has('isHost')}\r\n                                   onClick={() => setPredicate('isHost', 'true')} />\r\n                  </Menu>\r\n                  <Header />\r\n                  <Calendar onChange={(date) => setPredicate('startDate', date as Date)}\r\n                            value={predicate.get('startDate' || new Date())} />\r\n            </>\r\n      )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { SyntheticEvent } from 'react';\r\nimport { Button, Reveal } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n      profile : Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({profile}: Props) {\r\n      const {profileStore, userStore} = useStore();\r\n      const {updateFollowing} = profileStore;\r\n\r\n      if (userStore.user?.username === profile.username) return null;\r\n\r\n      function handleFollow(e: SyntheticEvent, username: string) {\r\n            e.preventDefault();\r\n            profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n      }\r\n      \r\n      return (\r\n            <Reveal animated='move'>\r\n                  <Reveal.Content visible style={{width:'100%'}}>\r\n                        <Button fluid color='teal' content={profile.following ? 'Following' : 'Not Following'} />\r\n                  </Reveal.Content>\r\n                  <Reveal.Content hiddle style={{width:'100%'}}>\r\n                        <Button fluid basic color={profile.following ? 'red' : 'green'} content={profile.following ? 'Unfollow' : 'Follow'} onClick={(e) => handleFollow(e, profile.username)}/>\r\n                  </Reveal.Content>\r\n            </Reveal>\r\n      )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n      profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}: Props) {\r\n      return (\r\n            <Card as={Link} to={`/profiles/${profile.username}`}>\r\n                  <Image src={profile.image || '/assets/user.png'} />\r\n                  <Card.Content>\r\n                        <Card.Header>{profile.displayName}</Card.Header>\r\n                        <Card.Description>Bio goes here</Card.Description>\r\n                  </Card.Content>\r\n                  <Card.Content extra>\r\n                        <Icon name='user' />\r\n                        {profile.followersCount} followers\r\n                  </Card.Content>\r\n                  <FollowButton profile={profile} />\r\n            </Card>\r\n      )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n      attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({attendees}: Props) {\r\n      const styles = {\r\n            borderColor: 'orange',\r\n            borderWidth: 3\r\n      }\r\n\r\n      return (\r\n            <List horizontal>\r\n                  {attendees.map(attendee => (\r\n                        <Popup hoverable key={attendee.username} trigger={\r\n                              <List.Item key={attendee.username} as={Link} to={`/profile/${attendee.username}`}>\r\n                                    <Image size='mini' circular src={attendee.image|| '/assets/user.png'} bordered style={attendee.following ? styles : null} />\r\n                              </List.Item>  \r\n                        }>\r\n                              <Popup.Content>\r\n                                    <ProfileCard profile={attendee} />\r\n                              </Popup.Content>\r\n                        </Popup>\r\n                  ))}            \r\n            </List>\r\n      )\r\n})","import { format } from 'date-fns';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport ActivityListItemAttendees from './ActivityListItemAttendees';\r\n\r\ninterface Props {\r\n      activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({activity}: Props) {\r\n      return (\r\n            <Segment.Group>\r\n                  <Segment>\r\n                        {activity.isCancelled &&\r\n                              <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\r\n                        }\r\n                        <Item.Group>\r\n                              <Item>\r\n                                    <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'}/>\r\n                                    <Item.Content>\r\n                                          <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                                {activity.title}\r\n                                          </Item.Header>\r\n                                          <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link> </Item.Description>\r\n                                          {activity.isHost && (\r\n                                                <Item.Description>\r\n                                                      <Label basic color='orange'>\r\n                                                            You are hosting this activity\r\n                                                      </Label>\r\n                                                </Item.Description>\r\n                                          )}\r\n                                          {activity.isGoing && !activity.isHost && (\r\n                                                <Item.Description>\r\n                                                      <Label basic color='green'>\r\n                                                            You are going to this activity\r\n                                                      </Label>\r\n                                                </Item.Description>\r\n                                          )}\r\n                                    </Item.Content>\r\n                              </Item>\r\n                        </Item.Group>\r\n                  </Segment>\r\n                  <Segment>\r\n                        <span>\r\n                              <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                              <Icon name='marker' /> {activity.venue}\r\n                        </span>\r\n                  </Segment>\r\n                  <Segment secondary>\r\n                        <ActivityListItemAttendees attendees={activity.attendees!}/>\r\n                  </Segment>\r\n                  <Segment clearing>\r\n                        <span>{activity.description}</span>\r\n                        <Button\r\n                              as={Link}\r\n                              to={`/activities/${activity.id}`}\r\n                              color='teal'\r\n                              floated='right'\r\n                              content='View'\r\n                        />\r\n                  </Segment>\r\n            </Segment.Group>\r\n      )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList() {\r\n    const {activityStore} = useStore();\r\n    const {groupedActivities} = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => ( \r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity}/>\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n   \r\n    const {activityStore} = useStore();\r\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n      if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities]);\r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll pageStart={0} loadMore={handleGetNext} hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages} initialLoad={false}>\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted? : boolean;\r\n    content? : string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content}/>\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n      placeholder : string;\r\n      name: string;\r\n      rows: number;\r\n      label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n      const [field, meta] = useField(props.name);\r\n      return (\r\n            <Form.Field error={meta.touched && !!meta.error}>\r\n                  <textarea {...field} {...props} />\r\n                  {meta.touched && meta.error ? (\r\n                        <Label basic color='red'>{meta.error}</Label>\r\n                  ) : null}\r\n            </Form.Field>\r\n      )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n      placeholder : string;\r\n      name: string;\r\n      options: any;\r\n      label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n      const [field, meta, helpers] = useField(props.name);\r\n      return (\r\n            <Form.Field error={meta.touched && !!meta.error}>\r\n                  <Select \r\n                        clearable\r\n                        options={props.options}\r\n                        value={field.value || null}\r\n                        onChange={(e, d) => helpers.setValue(d.value)}\r\n                        onBlur={() => helpers.setTouched(true)}\r\n                        placeholder={props.placeholder}\r\n                  />\r\n                  {meta.touched && meta.error ? (\r\n                        <Label basic color='red'>{meta.error}</Label>\r\n                  ) : null}\r\n            </Form.Field>\r\n      )\r\n}","export const categoryOptions = [\r\n      {text: 'Drinks', value: 'drinks'},\r\n      {text: 'Culture', value: 'culture'},\r\n      {text: 'Film', value: 'film'},\r\n      {text: 'Food', value: 'food'},\r\n      {text: 'Music', value: 'music'},\r\n      {text: 'Travel', value: 'travel'}\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n      const [field, meta, helpers] = useField(props.name!);\r\n      return (\r\n            <Form.Field error={meta.touched && !!meta.error}>\r\n                  <DatePicker\r\n                        {...field}\r\n                        {...props}\r\n                        selected={(field.value && new Date(field.value)) || null}\r\n                        onChange={value => helpers.setValue(value)}\r\n                  />\r\n                  {meta.touched && meta.error ? (\r\n                        <Label basic color='red'>{meta.error}</Label>\r\n                  ) : null}\r\n            </Form.Field>\r\n      )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\nimport React from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nexport default observer(function ActivityForm() {\r\n    \r\n    const history = useHistory();\r\n    const {activityStore} = useStore();\r\n    const { loadActivity, loadingInitial, createActivity, updateActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required.'),\r\n        description: Yup.string().required('The activity description is required.'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required()\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity])\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n       if (!activity.id) {\r\n           let newActivity = {\r\n               ...activity,\r\n               id: uuid()\r\n           };\r\n           createActivity(newActivity).then(() => {\r\n               history.push(`/activities/${newActivity.id}`)\r\n           })\r\n       } else {\r\n           updateActivity(activity).then(() => {\r\n            history.push(`/activities/${activity.id}`)\r\n           })\r\n       }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading Activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik validationSchema={validationSchema}\r\n                    enableReinitialize \r\n                    initialValues={activity} \r\n                    onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) =>\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />       \r\n                        <MyTextArea rows={3} placeholder='Description' name='description'/>\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput \r\n                            placeholderText='Date' \r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='Time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button disabled={isSubmitting || !dirty || !isValid} loading={isSubmitting} floated='right' positive type='submit' content='Submit'/>\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel'/>\r\n                    </Form>\r\n                }\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const {userStore: {user, logout}} = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}}/>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities'/>\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors'/>\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity'/>\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power'/>\r\n                        </Dropdown.Menu>                \r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { Field, FieldProps, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { useEffect } from 'react';\r\nimport {Segment, Header, Comment, Form, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\r\n    const {commentStore} = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, {resetForm}) =>\r\n                        commentStore.addComments(values).then(() => resetForm())\r\n                    }\r\n                    initialValues={{body: ''}}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({isSubmitting, isValid, handleSubmit}) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{position: 'relative'}}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + Enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>  \r\n                       \r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'}/>\r\n                            <Comment.Content>\r\n                                <Comment.Author as={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}    \r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.displayName}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button color={activity.isCancelled ? 'green' : 'red'} float = 'left' basic content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'} onClick={cancelActivityToggle} loading={loading} />\r\n                        <Button disabled={activity.isCancelled} as={Link} to={`/manage/${activity.id}`} color='orange' floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>  \r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled} loading={loading} onClick={updateAttendance} color='teal'>Join Activity</Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                        {attendee.username === host?.username && \r\n                            <Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                            >\r\n                                Host\r\n                            </Label>\r\n                        }\r\n                        <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                            </Item.Header>\r\n                            {attendee.following && \r\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                            }\r\n                        </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n\r\n\r\n\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent/>;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(errors));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nexport default function NotFound() {\r\n      return (\r\n            <Segment placeholder>\r\n                  <Header icon>\r\n                        <Icon name='search' />\r\n                        Opps - we've looked everywhere and could not find this.\r\n                  </Header>\r\n                  <Segment.Inline>\r\n                        <Button as={Link} to='/activities' primary>\r\n                              Return to activities page\r\n                        </Button>\r\n                  </Segment.Inline>\r\n            </Segment>\r\n      )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n      const {commonStore} = useStore();\r\n      return (\r\n            <Container>\r\n                  <Header as='h1' content='Server Error' />\r\n                  <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n                  {commonStore.error?.details &&\r\n                        <Segment>\r\n                              <Header as='h4' content='Stack trace' color='teal' />\r\n                              <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                        </Segment>\r\n                  }\r\n            </Container>\r\n      )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n      const {modalStore} = useStore();\r\n\r\n      return (\r\n            <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n                  <Modal.Content>\r\n                        {modalStore.modal.body}\r\n                  </Modal.Content>\r\n            </Modal>\r\n      )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Grid, Header, Tab, TabProps, Image } from 'semantic-ui-react';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nconst panes = [\r\n      { menuItem: 'Future Events', pane: {key: 'future'} },\r\n      { menuItem: 'Past Events', pane: {key: 'past'} },\r\n      { menuItem: 'Hosting', pane: {key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n      const { profileStore } = useStore();\r\n      const {\r\n            loadUserActivities,\r\n            profile,\r\n            loadingActivities,\r\n            userActivities\r\n      } = profileStore\r\n\r\n      useEffect(() => {\r\n            loadUserActivities(profile!.username);\r\n      }, [loadUserActivities, profile]);\r\n\r\n      const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n            loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n      };\r\n\r\n      return (\r\n            <Tab.Pane loading={loadingActivities}>\r\n                  <Grid>\r\n                        <Grid.Column width={16}>\r\n                              <Header floated='left' icon='calender' content={'Activities'} />\r\n                        </Grid.Column>\r\n                        <Grid.Column width={16}>\r\n                              <Tab panes={panes} menu={{ secondary: true, pointing: true }}\r\n                                   onTabChange={(e, data) => handleTabChange(e, data)}/>\r\n                              <br />\r\n                              <Card.Group itemsPerRow={4}>\r\n                                    {userActivities.map((activity: UserActivity) => (\r\n                                          <Card as={Link} to={`/activities/${activity.id}`} key={activity.id}>\r\n                                                <Image src={`/assets/categoryImages/${activity.category}.jpg`} style={{minHeight: 100, objectFit: 'cover'}} />\r\n                                                <Card.Content>\r\n                                                      <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                                      <Card.Meta textAlign='center'>\r\n                                                            <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                                            <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                                      </Card.Meta>\r\n                                                </Card.Content>\r\n                                          </Card> \r\n                                    ))}\r\n                              </Card.Group>\r\n                        </Grid.Column>\r\n                  </Grid>\r\n            </Tab.Pane>\r\n      )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n      const {profileStore} = useStore();\r\n      const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n      \r\n      return (\r\n            <Tab.Pane loading={loadingFollowings}>\r\n                  <Grid>\r\n                       <Grid.Column width={16}>\r\n                              <Header floated='left' icon='user' content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />     \r\n                        </Grid.Column>\r\n                        <Grid.Column width={16}>\r\n                              <Card.Group itemsPerRow={4}>\r\n                                    {followings.map(profile => (\r\n                                          <ProfileCard key={profile.username} profile={profile} />\r\n                                    ))}\r\n                              </Card.Group>\r\n                        </Grid.Column>\r\n                  </Grid>\r\n            </Tab.Pane>\r\n      )\r\n})","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css'\r\n\r\ninterface Props {\r\n      imagePreview: string;\r\n      setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n      return (\r\n            <Cropper\r\n                  src={imagePreview}\r\n                  style={{height: 200, width: '100%'}}\r\n                  initialAspectRatio={1}\r\n                  aspectRatio={1}\r\n                  preview='.img-preview'\r\n                  guides={false}\r\n                  viewMode={1}\r\n                  autoCropArea={1}\r\n                  background={false}\r\n                  onInitialized={cropper => setCropper(cropper)}\r\n            />\r\n      )\r\n}","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n  setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n  const dzStyles = {\r\n    border: 'dashed 3px #eee',\r\n    borderColor: '#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '30px',\r\n    textAlign: 'center' as 'center',\r\n    height: 200\r\n  }\r\n\r\n  const dzActive = {\r\n    borderColor: 'green'\r\n  }\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n      preview: URL.createObjectURL(file)\r\n    })))\r\n  }, [setFiles])\r\n\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles} >\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge' />\r\n      <Header content='Drop image here' />\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\ninterface Props {\r\n      loading: boolean;\r\n      uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n      const [files, setFiles] = useState<any>([]);\r\n      const [cropper, setCropper] = useState<Cropper>();\r\n\r\n      function onCrop() {\r\n            if (cropper) {\r\n                  cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n            }\r\n      }\r\n\r\n      useEffect(() => {\r\n            return () => {\r\n                  files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n            }\r\n      }, [files])\r\n\r\n      return (\r\n            <Grid>\r\n                  <Grid.Column width={4}>\r\n                        <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                        <PhotoWidgetDropzone setFiles={setFiles}/>\r\n                  </Grid.Column>\r\n                  <Grid.Column width={1}/>\r\n                  <Grid.Column width={4}>\r\n                        <Header sub color='teal' content='Step 2 - Resize Image' />\r\n                        {files && files.length > 0 && (\r\n                              <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} /> \r\n                        )}\r\n                  </Grid.Column>\r\n                  <Grid.Column width={1}/>\r\n                  <Grid.Column width={4}>\r\n                        <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                        {files && files.length > 0 &&\r\n                              <>\r\n                                    <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}}></div>\r\n                                    <Button.Group widths={2}>\r\n                                          <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                                          <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                                    </Button.Group>\r\n                              </>\r\n                        }\r\n                  </Grid.Column>\r\n            </Grid>\r\n      )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Card, Header, Tab, Image, Grid, Button} from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/ImageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n      profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({profile}: Props) {\r\n      const {profileStore: {isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto}} = useStore();\r\n      const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n      const [target, setTarget] = useState('');\r\n\r\n      function handlePhotoUpload(file: Blob) {\r\n            uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n      }\r\n\r\n      function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n            setTarget(e.currentTarget.name);\r\n            setMainPhoto(photo);\r\n      }\r\n\r\n      function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n            setTarget(e.currentTarget.name);\r\n            deletePhoto(photo);\r\n      }\r\n\r\n      return (\r\n            <Tab.Pane>\r\n                  <Grid>\r\n                        <Grid.Column width={16}>\r\n                              <Header floated='left' icon='image' content='Photos' />\r\n                              {isCurrentUser && (\r\n                                    <Button float='right' basic content={addPhotoMode ? 'Cancel' : 'Add Photo'} \r\n                                    onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                              />\r\n                              )}\r\n                        </Grid.Column>\r\n                        <Grid.Column width={16}>\r\n                              {addPhotoMode ? (\r\n                                    <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                                    ): (\r\n                                          <Card.Group itemsPerRow={5}>\r\n                                                {profile.photos?.map(\r\n                                                      photo => (\r\n                                                      <Card key={photo.id}>\r\n                                                            <Image src={photo.url} />\r\n                                                            {isCurrentUser &&\r\n                                                                  <Button.Group fluid width={2}>\r\n                                                                        <Button basic color='green' content='Main' name={'main' + photo.id} \r\n                                                                                disabled={photo.isMain} loading={target === 'main' + photo.id && loading}\r\n                                                                                onClick={e => handleSetMainPhoto(photo, e)} \r\n                                                                        />\r\n                                                                        <Button basic color='red' icon='trash'\r\n                                                                                loading={target === photo.id && loading}    \r\n                                                                                onClick={e => handleDeletePhoto(photo, e)} \r\n                                                                                disabled={photo.isMain}\r\n                                                                                name={photo.id}    \r\n                                                                        />\r\n                                                                  </Button.Group>\r\n                                                            }\r\n                                                      </Card>  \r\n                                                      )\r\n                                                )}\r\n                                          </Card.Group>\r\n                                    )\r\n                              }\r\n                        </Grid.Column>\r\n                  </Grid>\r\n                  <Header icon='image' content='Photos' />\r\n                  \r\n            </Tab.Pane>\r\n      )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n\r\ninterface Props {\r\n      profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n      const {profileStore} = useStore();\r\n\r\n      const panes = [\r\n            {menuItem: 'About', render: () => <Tab.Pane>About Content</Tab.Pane>},\r\n            {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile}/>},\r\n            {menuItem: 'Events', render: () => <ProfileActivities />},\r\n            {menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n            {menuItem: 'Following', render: () => <ProfileFollowings />}\r\n      ];\r\n\r\n      return (\r\n            <Tab \r\n                  menu={{fluid: true, vertical: true}}\r\n                  menuPosition='right'\r\n                  panes={panes}\r\n                  onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n            />\r\n      )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n      profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n      return (\r\n            <Segment>\r\n                  <Grid>\r\n                        <Grid.Column width={12}>\r\n                              <Item.Group>\r\n                                    <Item>\r\n                                          <Item.Image avatar size='small' src={profile.image || `/assets/user.png`} />\r\n                                          <Item.Content verticalAlign='middle'>\r\n                                                <Header as='h1' content={profile.displayName} />\r\n                                          </Item.Content>\r\n                                    </Item>\r\n                              </Item.Group>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={4}>\r\n                              <Statistic.Group widths={2}>\r\n                                    <Statistic label='Followers' value={profile.followersCount} />\r\n                                    <Statistic label='Following' value={profile.followingCount} />\r\n                              </Statistic.Group>\r\n                              <Divider />\r\n                              <FollowButton profile={profile} />\r\n                        </Grid.Column>\r\n                  </Grid>\r\n            </Segment>\r\n      )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage() {\r\n      const {username} = useParams<{username: string}>();\r\n      const {profileStore} = useStore();\r\n      const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\r\n\r\n      useEffect(() => {\r\n            loadProfile(username);\r\n            return () => {\r\n                  setActiveTab(0);\r\n            }\r\n      }, [loadProfile, setActiveTab, username])\r\n\r\n      if (loadingProfile) return <LoadingComponent content='Loading user profile...' />\r\n\r\n      return ( \r\n            <Grid>\r\n                  <Grid.Column width={16}>\r\n                        {profile &&\r\n                              <> \r\n                              <ProfileHeader profile={profile} />\r\n                              <ProfileContent profile={profile} />\r\n                              </>\r\n                        }\r\n                  </Grid.Column>\r\n            </Grid>\r\n      );\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n      component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n      const {userStore: {isLoggedIn}} = useStore();\r\n      \r\n      return (\r\n            <Route \r\n                  {...rest}\r\n                  render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to=\"/\" />}\r\n            />\r\n      )\r\n}","import React, { useEffect } from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router-dom';\r\nimport HomePage from '../../features/home/homepage';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport NavBar from './NavBar';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport TestErrors from '../../features/errors/TestError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport { useStore } from '../stores/store';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\nfunction App() {\r\n\r\n  const location = useLocation();\r\n  const {commonStore, userStore} = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    } else {\r\n      commonStore.setAppLoaded();\r\n    }\r\n  }, [commonStore, userStore])\r\n\r\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\r\n\r\n  return (\r\n    <>     \r\n      <ToastContainer position='bottom-right' hideProgressBar />\r\n      <ModalContainer />\r\n      <Route exact path='/' component={HomePage} />\r\n      <Route\r\n        path={'/(.+)'}\r\n        render={() => (\r\n            <>\r\n              <NavBar/>\r\n              <Container style={{marginTop: '7em'}}>\r\n                <Switch>\r\n                  <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n                  <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n                  <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n                  <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n                  <PrivateRoute path='/errors' component={TestErrors} />\r\n                  <Route path='/server-error' component={ServerError} />\r\n                  <Route component={NotFound} />\r\n                </Switch>\r\n              </Container>\r\n            </>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-calendar/dist/Calendar.css'\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './app/layout/styles.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport { Router } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <StoreContext.Provider value={store}>\r\n    <Router history={history}>\r\n      <ScrollToTop />\r\n      <App />\r\n    </Router>\r\n  </StoreContext.Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}